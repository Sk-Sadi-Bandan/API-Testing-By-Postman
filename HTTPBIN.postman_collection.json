{
	"info": {
		"_postman_id": "046beb9a-b80c-46bd-a1aa-727b6518eaf8",
		"name": "HTTPBIN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32011251"
	},
	"item": [
		{
			"name": "HTTP Method",
			"item": [
				{
					"name": "DELETE Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the presence of fields in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.args).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.files).to.exist;\r",
									"    pm.expect(responseData.form).to.exist;\r",
									"    pm.expect(responseData.headers).to.exist;\r",
									"    pm.expect(responseData.json).to.exist;\r",
									"    pm.expect(responseData.origin).to.exist;\r",
									"    pm.expect(responseData.url).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Headers field contains the required headers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.headers).to.exist;\r",
									"    pm.expect(responseData.headers).to.include.all.keys('Accept', 'Accept-Encoding', 'Host', 'Postman-Token', 'User-Agent', 'X-Amzn-Trace-Id');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers field does not contain any empty values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.headers).to.be.an('object');\r",
									"    Object.values(responseData.headers).forEach(value => {\r",
									"        pm.expect(value).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delete",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('args');\r",
									"    pm.expect(responseData).to.have.property('headers');\r",
									"    pm.expect(responseData).to.have.property('origin');\r",
									"    pm.expect(responseData).to.have.property('url');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers object should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.headers).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Origin and url fields are not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.origin).to.not.be.empty;\r",
									"  pm.expect(responseData.url).to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/get",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Metod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers are present and not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.headers).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.headers).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Json field should be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.json).to.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/patch",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"patch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.eql({});\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/post",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}